# -*- coding: utf-8 -*-
"""4Q-HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rLXxEUB8MyrpBvC6yQGAbO5tjuzZr91T
"""

# Input:
#   elt:   element to search
#   array: arbitrary array (list)
# Output:
#   index of elt in array or None if elt is not present in array

def simple_search(elt, array):
  for i, v in enumerate(array):
    if v == elt:
      return i
  return None


# Equivalent version without using enumerate:
def simple_search_bis(elt, array):
  for i in range(len(array)):
    if array[i] == elt:
      return i
  return None

print(simple_search(8, [2,32,4,1,16,8]))
print(simple_search(9, [2,32,4,1,16,8]))

#Q1 Answer: at most n times

# Input:
#   elt:   element to search
#   array: *sorted* array (list)
# Output:
#   index of elt in array or None if elt not in array
array = [1,2,4,8,16,32]
def sorted_search(elt, array, start=0, end=len(array)):
      if elt>array[len(array)-1]:
        return None
      if start> end:
        return None
      middle_i = (start+end)//2
      if elt == array[middle_i]:
        return middle_i
      if elt<array[middle_i]:
        return sorted_search(elt,array,start,middle_i-1)
      if elt>array[middle_i]:
        return sorted_search(elt,array,middle_i+1,end)
 
print(sorted_search(16,array))
print(sorted_search(0,array))

#Q3 Answer: at most (log n base 2)+1 times maybe